import React from 'react';
import PropTypes from 'prop-types';
import {
  StyledButton,
  StyledLinkButton,
  StyledIconButton,
  StyledButtonContent,
  StyledSpinner,
  StyledIconContainer,
} from './styles';

import React from 'react';
import styled, { css } from 'styled-components';
import { margin } from 'styled-system';
import Spinner from '../Spinner';
import Link from '../Link';
import { get, filterProps } from '../../theme/getters';

// Outline specific Button style
const buttonDefaultStyle = css`
  background: ${({color}) => get(`buttons.default.background`)};
  color: ${({color}) => get(`buttons.${color}.color`)};
  box-shadow: ${get('shadows.out')};
  &:hover:not([disabled]) {
    background: ${({color}) => get(`buttons.default.hover`)};
  }
`;


const buttonFlatStyle = css`
  color: ${({color}) => get(`buttons.${color}.color`)};
  background: transparent;
  box-shadow: unset;
  &:hover:not([disabled]) {
    background-color: ${({color}) => get(`buttons.${color}.hover`)};
  }
`;

const buttonFilledStyle = css`
  color: ${({color}) => get(`buttons.${color}.background`)};
  background: ${({color}) => get(`buttons.${color}.color`)};
  &:hover:not([disabled]) {
    background-color: ${({color}) => get(`buttons.${color}.active`)};
  }
`;

const buttonStyle = css`
  ${margin};
  ${buttonDefaultStyle};
  ${({flat}) => (flat) && buttonFlatStyle};
  ${({filled}) => (filled) && buttonFilledStyle};
  width: ${({ fullWidth }) => (fullWidth) && '100%'};
  font-size: ${({scale}) => get(`fontSizes.${scale}`)}};
  height: ${({scale}) => get(`heights.${scale}`)}};
  font-family: ${get('fonts.primary')};
  text-decoration: none;
  font-weight: ${get('fontWeights.semibold')};
  line-height: 1em;
  cursor: pointer;
  display: inline-flex;
  flex-wrap: 0;
  white-space: nowrap;
  justify-content: center;
  align-items: center;
  border-radius: ${({radius}) => get(`radius.${radius}`, radius)}};
  padding: 0 ${get('space.3')};
  border: 0;
  &:focus {
    outline: 3px solid transparent;
    box-shadow: 0 0 0 3px ${({color}) => get(`buttons.${color}.hover`)};
  };
  &:active:not([disabled]) {
    transform: translateY(1px);
  };
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  };
`

export const StyledButton = styled(React.forwardRef((props, ref) => (<button ref={ref} {...filterProps(props)} />)))`
  ${buttonStyle}
`;

export const StyledLinkButton = styled(React.forwardRef((props, ref) => (<Link underline="never" ref={ref} {...filterProps(props)} />)))`
  ${buttonStyle};
  min-width: 0;
`;

export const StyledIconButton = styled(StyledButton)`
  padding: 0;
  min-width: ${({scale}) => get(`heights.${scale}`)}};
  width: ${({scale}) => get(`heights.${scale}`)}};
  height: ${({scale}) => get(`heights.${scale}`)}};
  > span > svg {
    font-size: ${({ scale }) => (['small', 'tiny'].includes(scale)) ? '1em' : '1.25em'};
  }
`;

export const StyledSpinner = styled((props) => <Spinner {...filterProps(props)}/>)`
  .internal-circle,
  .external-circle {
    stroke: ${({filled, color}) => (filled) ? get(`colors.${color}.4`) : get(`colors.${color}.1`)};
  }
  position: absolute;
  display: ${({ isLoading }) => (isLoading) ? 'block' : 'none'};
  width: calc(${({scale}) => get(`heights.${scale}`)} - ${get('space.2')});
  height: calc(${({scale}) => get(`heights.${scale}`)} - ${get('space.2')});
`;

export const StyledIconContainer = styled.span`
  visibility: ${({ isLoading }) => (isLoading) ? 'hidden' : 'visible'};
  margin-left: ${({ position }) => (position === 'right') && get('space.2')};
  margin-right: ${({ position }) => (position === 'left') && get('space.2')};
  font-size: 0.825em;
  display: inline-flex;
  align-self: center;
`

export const StyledButtonContent = styled.span`
  visibility: ${({ isLoading }) => (isLoading) ? 'hidden' : 'visible'};
  display: inline-flex;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
`


/**
 * The doadds button.
 *
 * @version 0.0.1
 * @author [Frédéric Olland](https://github.com/folland87)
 */
const Button = React.forwardRef((props, ref) => {
  const {
    label,
    iconLeft,
    iconRight,
    icon,
    isLoading,
    disabled,
    children,
    theme,
    ...rest
  } = props;
  let ButtonComp = (rest.to) ? StyledLinkButton : StyledButton;
  if (icon) {
    ButtonComp = StyledIconButton;
  };

  return (
    <ButtonComp ref={ref} aria-label={label || children} disabled={disabled || isLoading} {...rest}>
      <StyledButtonContent isLoading={isLoading}>
        { (iconLeft && !icon) && (<StyledIconContainer focusable="false" position='left'>{iconLeft}</StyledIconContainer>) }
        { (icon) ? icon : children }
        { (iconRight && !icon) && (<StyledIconContainer focusable="false" position='right'>{iconRight}</StyledIconContainer>) }
      </StyledButtonContent>
      <StyledSpinner aria-hidden="true" focusable="false" isLoading={isLoading} {...rest}/>
    </ButtonComp>
  )
});

Button.propTypes = {
  /**
  * Button content. Required even for icon button as it sets the aria-label.
  * You may override the label with the label props if necessary.
  */
  children: PropTypes.string.isRequired,
  /**
  * Button size
  */
  label: PropTypes.string,
  /**
  * Button size
  */
  scale: PropTypes.oneOf(['small', 'medium', 'large']),
  /**
  * Button color
  */
  color: PropTypes.string,
  /**
  * Button outline variant
  */
  outline: PropTypes.bool,
  /**
  * Button link variant
  */
  flat: PropTypes.bool,
  /**
  * One of themes radii for button border-radius
  */
  radius: PropTypes.string,
  /**
  * Sets the width. Use 100% for a fullwidth button
  */
  width: PropTypes.string,
  /**
  * Sets the loading state
  */
  isLoading: PropTypes.bool,
  /**
  * Sets the disabled state
  */
  disabled: PropTypes.bool,
  /**
  * Sets an icon on children's left
  * Require an icon component.
  */
  iconLeft: PropTypes.node,
  /**
  * Sets an icon on children's right
  * Require an icon component.
  */
  iconRight: PropTypes.node,
  /**
  * For icon button. Ignore any other icon and children prop.
  * Require an icon component.
  */
  iconOnly: PropTypes.node,
}

Button.defaultProps = {
  label: null,
  scale: 'medium',
  outline: undefined,
  flat: undefined,
  color: 'default',
  radius: 'regular',
  isLoading: false,
  width: null,
  disabled: null,
  iconRight: null,
  iconLeft: null,
  iconOnly: null,
}

export default Button;
